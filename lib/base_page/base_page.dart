// Import external packages.
import 'dart:developer';
import 'package:flutter/material.dart';
import 'package:kar_kam/base_page/base_page_route_map.dart';

// Import project-specific files.
import 'package:kar_kam/base_page/base_page_specs.dart';
import 'package:kar_kam/utils/boxed_container.dart';
import 'package:kar_kam/utils/global_key_extension.dart';

/// Implements a generic page layout design.
///
/// [BasePage] presents a similar screen layout for each page with:
///     1. an AppBar at the top with a title,
///     2. specific screen contents including buttons for navigation
///        and functionality, and
///     3. a bottom navigation bar.
class BasePage extends StatefulWidget {
  const BasePage({
    super.key,
    this.basePageSpecs,
  });

  /// Defines the current layout of the UI, including buttons for navigation
  /// and functionality and specific functionality such as video capture,
  /// settings and file management.
  final BasePageSpecs? basePageSpecs;

  @override
  State<BasePage> createState() => _BasePageState();
}

class _BasePageState extends State<BasePage> {
  GlobalKey appBarKey = GlobalKey();
  GlobalKey bottomAppBarKey = GlobalKey();
  GlobalKey floatingActionButtonKey = GlobalKey();

  /// Defines the current layout of the UI, including buttons for navigation
  /// and functionality and specific functionality such as video capture,
  /// settings and file management.
  BasePageSpecs? basePageSpecs;

  /// Calculates the height of [bottomAppBar].
  double get bottomAppBarHeight {
    // [appBarKey.globalPaintBounds] is nullable so substitute [Rect.zero]
    // when necessary.
    Rect rect = appBarKey.globalPaintBounds ?? Rect.zero;
    return rect.height;
  }

  Widget fabArray(BuildContext context) {
    List<Widget> fabArray = [];

    List<String>? floatingActionButtonTargetList =
        basePageSpecs?.floatingActionButtonTargetList;
    if (floatingActionButtonTargetList is List<String>) {
      for (final string in floatingActionButtonTargetList) {
        fabArray.add(
          FloatingActionButton(
            heroTag: null,
            child: basePageRouteMap[string]?[1],
            onPressed: () {
              Navigator.of(context).pushReplacement(
                MaterialPageRoute(
                  builder: (BuildContext context) => BasePage(
                    basePageSpecs: basePageRouteMap[string]?[0],
                  ),
                ),
              );
            },
          ),
        );
      }
      // for (int i = 0; i <
      //     pageSpecs.floatingActionButtonTargetList!.length; i++) {
      //   fabArray.add(
      //     FloatingActionButton(
      //       heroTag: null,
      //       onPressed: () {
      //         print(context);
      //         print(basePageRouteMap[pageSpecs
      //             .floatingActionButtonTargetList![i]]);
      //         Navigator.of(context).pushReplacement(
      //           MaterialPageRoute(
      //             builder: (BuildContext context) =>
      //                 BasePage(
      //                   basePageSpecs: basePageRouteMap[
      //                   pageSpecs.floatingActionButtonTargetList![i]
      //                   ],
      //                 ),
      //           ),
      //         );
      //       },
      //     ),
      //   );
      // }
    }

    return Column(
      mainAxisAlignment: MainAxisAlignment.end,
      mainAxisSize: MainAxisSize.min,
      children: fabArray,
    );
  }

  @override
  void initState() {
    // [_BasePageState] is built in two phases:
    //    (i) with [basePageSpecs], which is null initially, and then
    //    (ii) with [basePageSpecs] = [widget.basePageSpecs], which may also
    //    be null, initiated by the following post-frame callback.
    //
    // [_BasePageState] is built in two phases because [basePageSpecs] may
    // require knowledge of the [FloatingActionButton] locations.
    WidgetsBinding.instance.addPostFrameCallback((_) {
      if (basePageSpecs == null) {
        setState(() {
          basePageSpecs = widget.basePageSpecs;
        });
      }
    });
    super.initState();
  }

  @override
  Widget build(BuildContext context) {
    log('_BasePageState, build...B = ${bottomAppBarKey.globalPaintBounds}');
    log('_BasePageState, build...F = ${floatingActionButtonKey.globalPaintBounds}');
    log('_BasePageState, build...A = ${appBarKey.globalPaintBounds}');

    return Scaffold(
      appBar: AppBar(
        key: appBarKey,
        backgroundColor: Theme.of(context).colorScheme.inversePrimary,
        title: Text(basePageSpecs?.title ?? ''),
      ),
      bottomNavigationBar: BottomAppBar(
        key: bottomAppBarKey,
        height: bottomAppBarHeight,
      ),
      floatingActionButton: BoxedContainer(
        child: fabArray(context),
      ),
      // floatingActionButton: BoxedContainer(
      //   // ToDo: make FloatinActionButton a list generated by
      //   // [basePageSpecs.floatingActionButtonTargetList]
      //   child: FloatingActionButton(
      //     heroTag: basePageSpecs?.floatingActionButtonTargetList![0] ?? 'test',
      //     key: floatingActionButtonKey,
      //     onPressed: () {
      //       Navigator.of(context).pushReplacement(
      //         MaterialPageRoute(
      //           builder: (BuildContext context) => BasePage(
      //             basePageSpecs: basePageRouteMap[
      //                 basePageSpecs?.floatingActionButtonTargetList![0]],
      //           ),
      //         ),
      //       );
      //     },
      //   ),
      // ),
      body: basePageSpecs?.contents,
    );
  }
}
